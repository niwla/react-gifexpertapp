{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GIfGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GIfGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACE,sBAAMC,SAda,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MASpB,SACM,uBACKO,KAAK,OACLC,MAAST,EACTU,SAtBa,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAON,IACtB,kCAAKA,SCJJO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAGtB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAlBAC,oBAAS,sBAAE,sBAAAtB,EAAA,sDAEPF,EAASC,GACJwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,OAPlB,2CAcT,CAACpB,IAIIqB,EDtBwBK,CAAc1B,GAAhCa,EAAb,EAAQN,KAAYa,EAApB,EAAoBA,QAGpB,OACI,qCACA,qBAAIJ,UAAU,oCAAd,cAAoDhB,KAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAGZ,qBAAKA,UAAU,YAAf,SAIYH,EAAOJ,KAAM,SAAAC,GAAG,OACb,cAAC,EAAD,eAEKA,GADGA,EAAIC,aEqBnBgB,EAvCI,WAGhB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAWA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAaA,GADPA,YCnBf6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.fb04f25f.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2) {\n            setCategories (cats => [inputValue, ...cats,]);\n            setInputValue('');\n\n        }\n\n\n    \n    }\n\n    return (   \n      <form onSubmit= {handleSubmit}>\n            <input\n                 type=\"text\"\n                 value= { inputValue}\n                 onChange={ handleInputChange }\n                 />\n\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=mVn7AiQj0xq8Y2ClScaOz6zKP6IRdBN9`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n\n\n        }\n    })\n\n    return gifs;\n\n\n}","import React from 'react'\n\nexport const GIfGridItem = ( {title, url} ) => {\n\n  //  console.log ( id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt ={ title} />\n            <p> {title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GIfGridItem } from './GIfGridItem';\n\nexport const GifGrid = ({ category}) => {\n\n\n    const { data:images,loading} = useFetchGifs( category);\n\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\"> {category}</h3>\n\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n\n        <div className=\"card-grid\">\n            \n             \n                {\n                    images.map ( img => (\n                       <GIfGridItem\n                        key = {img.id}\n                        {...img}\n                       />\n                    ))\n                }\n             \n        </div>\n        </>\n\n    )\n}\n\n\n","import { useEffect, useState } from 'react'\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect( async ()=> {\n\n        getGifs( category)\n            .then( imgs => {\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n\n            })\n\n\n    },[category])\n\n\n\n    return state; \n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp =() => {\n\n    //const categories = ['One Punch man', 'Samurai X','Dragon ball'];\n    const [categories, setCategories] = useState(['One Punch man'])\n\n    // const handleAdd = () =>{\n\n    //   // setCategories(['HxH', ...categories] );\n\n    //     setCategories (cats => [...cats, 'HxH']);\n\n    // }\n    \n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories}/>\n            <hr></hr>\n\n\n\n            <ol>    \n                { \n                    categories.map( category => (\n                        <GifGrid \n                        key= {category}\n                        category = { category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n\n\n }\n\n\n export default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}